const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Railway PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
console.log('DATABASE_URL:', process.env.DATABASE_URL);

async function setupDatabase() {
  const prisma = new PrismaClient();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway PostgreSQL...');
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const userCount = await prisma.user.count();
    const employeeCount = await prisma.employee.count();
    const inventoryCount = await prisma.inventory.count();
    const addonCount = await prisma.inventoryAddon.count();
    const sizNormCount = await prisma.sizNorm.count();

    console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Railway:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`);
    console.log(`üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${employeeCount}`);
    console.log(`üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${inventoryCount}`);
    console.log(`üîß –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${addonCount}`);
    console.log(`üìè –ù–æ—Ä–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤: ${sizNormCount}`);

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    if (userCount === 0) {
      console.log('\nüì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...');
      
      const dataPath = './local-data-export.json';
      if (!fs.existsSync(dataPath)) {
        console.error('‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', dataPath);
        return;
      }

      const data = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
      
      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:');
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
      console.log(`üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${data.employees.length}`);
      console.log(`üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${data.inventory.length}`);
      console.log(`üîß –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${data.inventoryAddons.length}`);
      console.log(`üìè –ù–æ—Ä–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤: ${data.sizNorms.length}`);

      // –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (data.users.length > 0) {
        console.log('\nüë• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        for (const user of data.users) {
          try {
            await prisma.user.upsert({
              where: { email: user.email },
              update: {
                password: user.password,
                name: user.name,
                lastName: user.lastName,
              },
              create: {
                id: user.id,
                email: user.email,
                password: user.password,
                name: user.name,
                lastName: user.lastName,
              }
            });
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        }
      }

      // –ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      if (data.employees.length > 0) {
        console.log('\nüë∑ –ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
        for (const employee of data.employees) {
          try {
            await prisma.employee.create({
              data: {
                id: employee.id,
                firstName: employee.firstName,
                lastName: employee.lastName,
                surName: employee.surName,
                age: employee.age,
                birthDate: employee.birthDate ? new Date(employee.birthDate) : null,
                profession: employee.profession,
                address: employee.address,
                employeeNumber: employee.employeeNumber,
                height: employee.height,
                clothingSize: employee.clothingSize,
                shoeSize: employee.shoeSize,
                userId: employee.userId,
              }
            });
            console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employee.firstName} ${employee.lastName} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employee.firstName} ${employee.lastName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        }
      }

      // –ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (data.inventory.length > 0) {
        console.log('\nüì¶ –ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...');
        for (const item of data.inventory) {
          try {
            await prisma.inventory.create({
              data: {
                id: item.id,
                itemName: item.itemName,
                itemType: item.itemType,
                issueDate: new Date(item.issueDate),
                quantity: item.quantity,
                status: item.status,
                employeeId: item.employeeId,
                createdAt: new Date(item.createdAt),
                updatedAt: new Date(item.updatedAt),
              }
            });
            console.log(`‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ${item.itemName} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ${item.itemName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        }
      }

      // –ò–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
      if (data.inventoryAddons.length > 0) {
        console.log('\nüîß –ò–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π...');
        for (const addon of data.inventoryAddons) {
          try {
            await prisma.inventoryAddon.create({
              data: {
                id: addon.id,
                name: addon.name,
                issueDate: new Date(addon.issueDate),
                wearPeriodMonths: addon.wearPeriodMonths,
                nextReplacementDate: new Date(addon.nextReplacementDate),
                inventoryId: addon.inventoryId,
                createdAt: new Date(addon.createdAt),
                updatedAt: new Date(addon.updatedAt),
              }
            });
            console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${addon.name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${addon.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        }
      }

      // –ò–º–ø–æ—Ä—Ç –Ω–æ—Ä–º —Ä–∞–∑–º–µ—Ä–æ–≤
      if (data.sizNorms.length > 0) {
        console.log('\nüìè –ò–º–ø–æ—Ä—Ç –Ω–æ—Ä–º —Ä–∞–∑–º–µ—Ä–æ–≤...');
        for (const norm of data.sizNorms) {
          try {
            await prisma.sizNorm.create({
              data: {
                id: norm.id,
                name: norm.name,
                classification: norm.classification,
                quantity: norm.quantity,
                period: norm.period,
                periodType: norm.periodType,
                createdAt: new Date(norm.createdAt),
                updatedAt: new Date(norm.updatedAt),
              }
            });
            console.log(`‚úÖ –ù–æ—Ä–º–∞ ${norm.name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –ù–æ—Ä–º–∞ ${norm.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
        }
      }

      console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ Railway –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalUserCount = await prisma.user.count();
    const finalEmployeeCount = await prisma.employee.count();
    const finalInventoryCount = await prisma.inventory.count();
    const finalAddonCount = await prisma.inventoryAddon.count();
    const finalSizNormCount = await prisma.sizNorm.count();

    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalUserCount}`);
    console.log(`üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${finalEmployeeCount}`);
    console.log(`üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${finalInventoryCount}`);
    console.log(`üîß –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${finalAddonCount}`);
    console.log(`üìè –ù–æ—Ä–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤: ${finalSizNormCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupDatabase();
