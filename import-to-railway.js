const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function importData() {
  console.log('üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Railway PostgreSQL...');

  try {
    // –ß–∏—Ç–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataPath = './local-data-export.json';
    if (!fs.existsSync(dataPath)) {
      console.error('‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', dataPath);
      return;
    }

    const data = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
    
    console.log('\nüìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
    console.log(`üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${data.employees.length}`);
    console.log(`üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${data.inventory.length}`);
    console.log(`üîß –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${data.inventoryAddons.length}`);
    console.log(`üìè –ù–æ—Ä–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤: ${data.sizNorms.length}`);

    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...');

    // –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (const user of data.users) {
      try {
        await prisma.user.upsert({
          where: { email: user.email },
          update: {
            password: user.password,
            name: user.name,
            lastName: user.lastName,
          },
          create: {
            id: user.id,
            email: user.email,
            password: user.password,
            name: user.name,
            lastName: user.lastName,
          }
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      }
    }
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${data.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    console.log('üë∑ –ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
    for (const employee of data.employees) {
      await prisma.employee.create({
        data: {
          id: employee.id,
          firstName: employee.firstName,
          lastName: employee.lastName,
          surName: employee.surName,
          age: employee.age,
          birthDate: employee.birthDate,
          profession: employee.profession,
          address: employee.address,
          employeeNumber: employee.employeeNumber,
          height: employee.height,
          clothingSize: employee.clothingSize,
          shoeSize: employee.shoeSize,
          userId: employee.userId,
        }
      });
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);

    // –ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...');
    for (const item of data.inventory) {
      await prisma.inventory.create({
        data: {
          id: item.id,
          itemName: item.itemName,
          itemType: item.itemType,
          issueDate: new Date(item.issueDate),
          quantity: item.quantity,
          status: item.status,
          employeeId: item.employeeId,
          createdAt: new Date(item.createdAt),
          updatedAt: new Date(item.updatedAt),
        }
      });
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.inventory.length} –∑–∞–ø–∏—Å–µ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);

    // –ò–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    console.log('üîß –ò–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...');
    for (const addon of data.inventoryAddons) {
      await prisma.inventoryAddon.create({
        data: {
          id: addon.id,
          name: addon.name,
          issueDate: new Date(addon.issueDate),
          wearPeriodMonths: addon.wearPeriodMonths,
          nextReplacementDate: new Date(addon.nextReplacementDate),
          inventoryId: addon.inventoryId,
          createdAt: new Date(addon.createdAt),
          updatedAt: new Date(addon.updatedAt),
        }
      });
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.inventoryAddons.length} –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π`);

    // –ò–º–ø–æ—Ä—Ç –Ω–æ—Ä–º —Ä–∞–∑–º–µ—Ä–æ–≤
    console.log('üìè –ò–º–ø–æ—Ä—Ç –Ω–æ—Ä–º —Ä–∞–∑–º–µ—Ä–æ–≤...');
    for (const norm of data.sizNorms) {
      await prisma.sizNorm.create({
        data: {
          id: norm.id,
          name: norm.name,
          classification: norm.classification,
          quantity: norm.quantity,
          period: norm.period,
          periodType: norm.periodType,
          createdAt: new Date(norm.createdAt),
          updatedAt: new Date(norm.updatedAt),
        }
      });
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.sizNorms.length} –Ω–æ—Ä–º —Ä–∞–∑–º–µ—Ä–æ–≤`);

    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
    console.log(`üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${data.employees.length}`);
    console.log(`üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${data.inventory.length}`);
    console.log(`üîß –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${data.inventoryAddons.length}`);
    console.log(`üìè –ù–æ—Ä–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤: ${data.sizNorms.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importData();
