const fs = require('fs');
const path = require('path');

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è PostgreSQL...');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
const migrationDir = path.join(__dirname, 'prisma', 'migrations');
const migrationName = 'init_postgresql';
const migrationPath = path.join(migrationDir, migrationName);

if (!fs.existsSync(migrationDir)) {
  fs.mkdirSync(migrationDir, { recursive: true });
}

if (!fs.existsSync(migrationPath)) {
  fs.mkdirSync(migrationPath, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
const sqlContent = `-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "lastName" TEXT NOT NULL,
    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Employee" (
    "id" TEXT NOT NULL,
    "firstName" TEXT NOT NULL,
    "lastName" TEXT NOT NULL,
    "surName" TEXT,
    "age" INTEGER NOT NULL,
    "birthDate" TIMESTAMP(3),
    "profession" TEXT NOT NULL,
    "address" TEXT NOT NULL,
    "employeeNumber" TEXT,
    "height" INTEGER,
    "clothingSize" TEXT,
    "shoeSize" TEXT,
    "userId" TEXT NOT NULL,
    CONSTRAINT "Employee_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Inventory" (
    "id" TEXT NOT NULL,
    "itemName" TEXT NOT NULL,
    "itemType" TEXT NOT NULL,
    "issueDate" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "quantity" INTEGER NOT NULL DEFAULT 1,
    "status" TEXT NOT NULL DEFAULT '–≤—ã–¥–∞–Ω',
    "employeeId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "Inventory_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "InventoryAddon" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "issueDate" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "wearPeriodMonths" INTEGER NOT NULL,
    "nextReplacementDate" TIMESTAMP(3) NOT NULL,
    "inventoryId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "InventoryAddon_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "SizNorm" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "classification" TEXT,
    "quantity" INTEGER NOT NULL DEFAULT 1,
    "period" TEXT NOT NULL,
    "periodType" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "SizNorm_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- AddForeignKey
ALTER TABLE "Employee" ADD CONSTRAINT "Employee_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
`;

fs.writeFileSync(path.join(migrationPath, 'migration.sql'), sqlContent);

// –°–æ–∑–¥–∞–µ–º migration_lock.toml
const lockContent = `# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
`;

fs.writeFileSync(path.join(migrationDir, 'migration_lock.toml'), lockContent);

console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:');
console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${migrationPath}`);
console.log(`üìÑ SQL —Ñ–∞–π–ª: ${path.join(migrationPath, 'migration.sql')}`);
console.log(`üîí Lock —Ñ–∞–π–ª: ${path.join(migrationDir, 'migration_lock.toml')}`);

console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: npx prisma migrate deploy');
console.log('2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Railway');
console.log('3. –î–µ–ø–ª–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
